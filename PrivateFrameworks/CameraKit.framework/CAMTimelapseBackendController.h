/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

#import "CAMNebulaDaemonProtocol-Protocol.h"

@class CAMTimelapseMovieWriter, CAMTimelapseState, NSMutableArray, NSObject<OS_dispatch_queue>;

@interface CAMTimelapseBackendController : NSObject <CAMNebulaDaemonProtocol>
{
    _Bool __writingMovie;
    _Bool __capturing;
    NSMutableArray *__sessionContexts;
    NSObject<OS_dispatch_queue> *__workQueue;
    CAMTimelapseMovieWriter *__movieWriter;
    CAMTimelapseState *__currentState;
}

+ (id)sharedInstance;
@property(nonatomic, getter=_isCapturing, setter=_setCapturing:) _Bool _capturing; // @synthesize _capturing=__capturing;
@property(retain, nonatomic, setter=_setCurrentState:) CAMTimelapseState *_currentState; // @synthesize _currentState=__currentState;
@property(readonly, nonatomic) CAMTimelapseMovieWriter *_movieWriter; // @synthesize _movieWriter=__movieWriter;
@property(readonly, nonatomic) _Bool _writingMovie; // @synthesize _writingMovie=__writingMovie;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *_workQueue; // @synthesize _workQueue=__workQueue;
@property(readonly, nonatomic) NSMutableArray *_sessionContexts; // @synthesize _sessionContexts=__sessionContexts;
- (void).cxx_destruct;
- (void)handleClientDisconnection;
- (void)handleClientConnection:(id)arg1;
- (struct CGAffineTransform)_frameTransformForState:(id)arg1;
- (void)_notifyAssetsdOfIncomingMovieAtPath:(id)arg1 duration:(double)arg2 state:(id)arg3;
- (void)_movieWrittenToFilePath:(id)arg1 duration:(double)arg2 state:(id)arg3;
- (void)_writeMovieForSessionContext:(id)arg1;
- (_Bool)_deleteItemAtPath:(id)arg1;
- (void)_performPendingWork;
- (id)_getOrCreateSessionContextForTimelapseUUID:(id)arg1;
- (void)_updateSessionContext:(id)arg1 withState:(id)arg2;
- (void)_updatePendingWorkFromDiskForceEndLastSession:(_Bool)arg1;
- (void)updatePendingWorkFromDiskForceEndLastSession:(_Bool)arg1;
- (void)stopNebulaWithUUID:(id)arg1;
- (void)finishCaptureForNebulaWithUUID:(id)arg1;
- (void)updateNebulaWithUUID:(id)arg1;
- (void)resumeNebulaWithUUID:(id)arg1;
- (void)startNebulaWithUUID:(id)arg1;
- (void)_dispatchToMainQueueWithBlock:(id)arg1;
- (void)_dispatchToWorkQueueWithBlock:(id)arg1;
- (id)init;

@end

