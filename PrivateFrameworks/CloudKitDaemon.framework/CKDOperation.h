/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSOperation.h"

#import "CKDFlowControlBudgetable-Protocol.h"
#import "CKDFlowControllable-Protocol.h"

@class CKDClientContext, CKDClientProxy, CKDURLRequest, CKOperationResult, NSArray, NSError, NSMutableArray, NSObject<OS_dispatch_group>, NSObject<OS_dispatch_queue>, NSString;

@interface CKDOperation : NSOperation <CKDFlowControllable, CKDFlowControlBudgetable>
{
    _Bool _isFinished;
    _Bool _isExecuting;
    _Bool _usesBackgroundSession;
    _Bool _allowsCellularAccess;
    CKDURLRequest *_request;
    unsigned long long _flowControlCost;
    NSString *_operationID;
    CKDOperation *_parentOperation;
    CKDClientContext *_context;
    CKDClientProxy *_proxy;
    NSString *_sourceApplicationBundleIdentifier;
    NSString *_sourceApplicationSecondaryIdentifier;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    NSError *_error;
    unsigned long long _state;
    NSObject<OS_dispatch_group> *_stateTransitionGroup;
    NSMutableArray *_requestUUIDs;
    NSString *_parentSectionID;
    NSMutableArray *_mChildOperations;
}

@property(retain, nonatomic) NSMutableArray *mChildOperations; // @synthesize mChildOperations=_mChildOperations;
@property(retain, nonatomic) NSString *parentSectionID; // @synthesize parentSectionID=_parentSectionID;
@property(retain, nonatomic) NSMutableArray *requestUUIDs; // @synthesize requestUUIDs=_requestUUIDs;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *stateTransitionGroup; // @synthesize stateTransitionGroup=_stateTransitionGroup;
@property(nonatomic) unsigned long long state; // @synthesize state=_state;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
@property(retain, nonatomic) NSString *sourceApplicationSecondaryIdentifier; // @synthesize sourceApplicationSecondaryIdentifier=_sourceApplicationSecondaryIdentifier;
@property(retain, nonatomic) NSString *sourceApplicationBundleIdentifier; // @synthesize sourceApplicationBundleIdentifier=_sourceApplicationBundleIdentifier;
@property(nonatomic) _Bool allowsCellularAccess; // @synthesize allowsCellularAccess=_allowsCellularAccess;
@property(nonatomic) _Bool usesBackgroundSession; // @synthesize usesBackgroundSession=_usesBackgroundSession;
@property(nonatomic) __weak CKDClientProxy *proxy; // @synthesize proxy=_proxy;
@property(readonly, nonatomic) __weak CKDClientContext *context; // @synthesize context=_context;
@property(nonatomic) __weak CKDOperation *parentOperation; // @synthesize parentOperation=_parentOperation;
@property(readonly, nonatomic) NSString *operationID; // @synthesize operationID=_operationID;
@property(readonly, nonatomic) unsigned long long flowControlCost; // @synthesize flowControlCost=_flowControlCost;
@property(nonatomic) _Bool isExecuting; // @synthesize isExecuting=_isExecuting;
@property(nonatomic) _Bool isFinished; // @synthesize isFinished=_isFinished;
- (void).cxx_destruct;
@property(readonly, nonatomic) CKOperationResult *operationResult;
- (void)fillOutOperationResult:(id)arg1;
- (Class)operationResultClass;
@property(retain, nonatomic) CKDURLRequest *request; // @synthesize request=_request;
- (void)configureRequest:(id)arg1;
- (_Bool)isConcurrent;
@property(readonly, nonatomic) unsigned int QOSClass;
- (id)flowControlKey;
@property(readonly, nonatomic) _Bool shouldCheckAppVersion;
- (void)cancel;
- (void)finishWithError:(id)arg1;
- (void)makeStateTransition:(_Bool)arg1;
- (_Bool)makeStateTransition;
- (void)main;
- (void)start;
- (_Bool)_checkAppVersion;
- (void)_continueOperationStart;
- (void)addAndRunChildOperation:(id)arg1;
- (id)newChildOperationInfoOfClass:(Class)arg1;
@property(readonly, nonatomic) NSArray *childOperations;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)CKPropertiesDescription;
- (id)_requestUUIDsString;
@property(readonly, nonatomic) NSString *sectionID;
- (void)dealloc;
- (id)initWithOperationInfo:(id)arg1 clientContext:(id)arg2;

@end

